1. Format Compatibility and Error Handling
ImageIcon constructor can load many image formats, but it doesn't throw an error if the file is missing 
or unreadable-it just creates an empty icon. This can make debugging harder.
Using ImageIO.read() (as in your loadImage() method) allows you to catch and handle IOException if the 
image can't be loaded, making error handling more explicit and robust.

2. Image Processing and Manipulation
ImageIO.read() loads the image as a BufferedImage, which allows you to process, manipulate, or analyze 
the image before displaying it (e.g., resizing, filtering, drawing on it).
If you use new ImageIcon("path"), you don't get access to the raw image data for such processing.

3. Support for More Formats
In some cases, ImageIcon may not handle certain formats (like BMP) as reliably as ImageIO.read().
ImageIO is extensible and can be configured to support additional formats via plugins.

4. Consistent Resource Loading
The method can be extended to load images not just from files, but also from resources 
(like inside JAR files), URLs, or streams, by changing how the image is read.

5. Custom Logging and Fallbacks
The custom method allows you to log when an image can't be found and return null or a default icon, 
improving the robustness of your application.

Summary Table
Approach	Pros	Cons
new ImageIcon("path")	Simple, direct, minimal code	Silent failure, no error info, limited 
processing
Custom loadImage() with ImageIO	Better error handling, image processing, extensibility	Slightly more 
code, needs try/catch
In summary:
Using ImageIcon(path) is fine for simple needs, but the approach in your screenshot with ImageIO.read() 
and a custom loadImage() method gives you more control, better error handling, and flexibility for more 
complex or robust applications.

--------------------------------------------------------------------------------------------------------

setHorizontalAlignment(SwingConstants.CENTER) centers the image inside the label's rectangle, not on 
the whole window.

--------------------------------------------------------------------------------------------------------

Key Differences:

Return Type
getString(key): Returns a plain Java String.
getJsonString(key): Returns a JsonString object (which you can then call .getString() on to get the 
actual text).

Null Handling
getString(key): Throws a NullPointerException if the key is missing.
getJsonString(key): Returns null if the key is missing.

--------------------------------------------------------------------------------------------------------
